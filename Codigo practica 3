import java.util.Scanner;


public class Otravez {
	
	


	private static final double EPSILON = 1e-8;
	 
    private final int N;    
    private double[][] a;    



  
 
   
    public Otravez(double[][] A, double[] b) 
    {
        N = b.length;
 
      
        a = new double[N][N+N+1];
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                a[i][j] = A[i][j];
 
        for (int i = 0; i < N; i++)
            a[i][N+i] = 1.0;
 
        for (int i = 0; i < N; i++) 
            a[i][N+N] = b[i];
 
        solve();
 
        assert check(A, b);
    }
 
    private void solve() 
    {
        
        for (int p = 0; p < N; p++) 
        {
            int max = p;
            for (int i = p+1; i < N; i++) 
            {
                if (Math.abs(a[i][p]) > Math.abs(a[max][p])) 
                {
                    max = i;
                }
            }
 
           
            swap(p, max);
 
          
            if (Math.abs(a[p][p]) <= EPSILON) 
            {
                continue;
               
            }
 
            
            pivot(p, p);
        }
      
    }
 
   
    private void swap(int row1, int row2) 
    {
        double[] temp = a[row1];
        a[row1] = a[row2];
        a[row2] = temp;
    }
 
 
  
    private void pivot(int p, int q) 
    {  
        for (int i = 0; i < N; i++) {
            double alpha = a[i][q] / a[p][q];
            for (int j = 0; j <= N+N; j++) 
            {
                if (i != p && j != q) a[i][j] -= alpha * a[p][j];
            }
        }
 
       
        for (int i = 0; i < N; i++)
            if (i != p) a[i][q] = 0.0;
 
      
        for (int j = 0; j <= N+N; j++)
            if (j != q) a[p][j] /= a[p][q];
        a[p][q] = 1.0;
    }
 
  
    public double[] primal() 
    {
        double[] x = new double[N];
        for (int i = 0; i < N; i++) 
        {
            if (Math.abs(a[i][i]) > EPSILON)
                x[i] = a[i][N+N] / a[i][i];
            else if (Math.abs(a[i][N+N]) > EPSILON)
                return null;
        }
        return x;
    }
 
   
    public double[] dual() 
    {
        double[] y = new double[N];
        for (int i = 0; i < N; i++) 
        {
            if ( (Math.abs(a[i][i]) <= EPSILON) && (Math.abs(a[i][N+N]) > EPSILON) ) 
            {
                for (int j = 0; j < N; j++)
                    y[j] = a[i][N+j];
                return y;
            }
        }
        return null;
    }
 
   
    public boolean isFeasible() 
    {
        return primal() != null;
    }
 
  
    private void show() 
    {
        for (int i = 0; i < N; i++) 
        {
            for (int j = 0; j < N; j++) 
            {
                System.out.print(" "+a[i][j]);
            }
            System.out.print("| ");
            for (int j = N; j < N+N; j++) 
            {
            	System.out.print(" "+a[i][j]);
            }
            System.out.print("| \n"+a[i][N+N]);
        }
        System.out.println();
    }
 
 
   
    private boolean check(double[][] A, double[] b) 
    {
 
      
        if (isFeasible()) 
        {
            double[] x = primal();
            for (int i = 0; i < N; i++) 
            {
                double sum = 0.0;
                for (int j = 0; j < N; j++) 
                {
                     sum += A[i][j] * x[j];
                }
                if (Math.abs(sum - b[i]) > EPSILON) 
                {
                	System.out.println("no");
                	System.out.println(i+" = "+b[i]+", sum = "+sum+"\n");
                   return false;
                }
            }
            return true;
        }
 
      
        else 
        {
            double[] y = dual();
            for (int j = 0; j < N; j++) 
            {
                double sum = 0.0;
                for (int i = 0; i < N; i++) 
                {
                     sum += A[i][j] * y[i];
                }
                if (Math.abs(sum) > EPSILON) 
                {
                    System.out.println("invalido");
                    System.out.println("sum = "+sum+"\n");
                    return false;
                }
            }
            double sum = 0.0;
            for (int i = 0; i < N; i++) 
            {
                sum += y[i] * b[i];
            }
            if (Math.abs(sum) < EPSILON) 
            {
            	System.out.println("invalido");
            	System.out.println("yb  = "+sum+"\n");
 
                return false;
            }
            return true;
        }
    }
 
 
    public static void test(double[][] A, double[] b) 
    {
       Otravez gaussian = new Otravez(A, b);
        if (gaussian.isFeasible()) 
        {
        	System.out.println("Solucion Ax = b");
            double[] x = gaussian.primal();
            for (int i = 0; i < x.length; i++) 
            {
            	System.out.println(" "+x[i]+"\n");
            }
        }
        else 
        {
        	System.out.println("invalido");
            double[] y = gaussian.dual();
            for (int j = 0; j < y.length; j++) 
            {
            	System.out.println(" "+y[j]+"\n");
            }
        }
        System.out.println();
    }
 
    public static void main(String[] args) 
    {

                    Scanner ObjLeer=new Scanner(System.in);

        int opcion=0;

    	
    	  System.out.printf("Bienvenido a la utp\n");
    	  System.out.printf("Metodos numericos\n");
    	  System.out.printf("Alumno 1: Camilo Jose Reigosa./ 4-815-1331\n");
    	  System.out.printf("Alumno 2: Sebastian Pimentel./ 4-813-1050 \n");
    	  System.out.printf("Profesor:  Andy Gomez     \n");
 
    	  
    	  while (opcion != 7) {
    		  
    		   System.out.printf("\n-----------------------------------------");
System.out.printf("-----Programa------------------------------");
System.out.printf("\n1.Acceder a ingreso de datos");
System.out.printf("\n");
opcion=ObjLeer.nextInt();


switch (opcion) {

case 1:
    Scanner input = new Scanner(System.in);
        System.out.println("Numero de variables: ");
        int n = input.nextInt();
        System.out.println("Ingrese coeficientes");
        System.out.println("ax + by + cz + ... = d");
        double [][]mat = new double[n][n];
        double []constants = new double[n];
        //input
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<n; j++)
            {
                mat[i][j] = input.nextDouble();
            }
            constants[i] = input.nextDouble();
        }
        test(mat, constants);   
    break;
}
    	  }
    	       
    }

}
